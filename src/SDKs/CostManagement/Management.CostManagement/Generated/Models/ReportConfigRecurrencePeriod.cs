// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Costmanagement.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The start and end date for recurrence schedule.
    /// </summary>
    public partial class ReportConfigRecurrencePeriod
    {
        /// <summary>
        /// Initializes a new instance of the ReportConfigRecurrencePeriod
        /// class.
        /// </summary>
        public ReportConfigRecurrencePeriod()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReportConfigRecurrencePeriod
        /// class.
        /// </summary>
        /// <param name="fromProperty">The start date of recurrence.</param>
        /// <param name="to">The end date of recurrence. If not provided, we
        /// default this to 10 years from the start date.</param>
        public ReportConfigRecurrencePeriod(System.DateTime fromProperty, System.DateTime? to = default(System.DateTime?))
        {
            FromProperty = fromProperty;
            To = to;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the start date of recurrence.
        /// </summary>
        [JsonProperty(PropertyName = "from")]
        public System.DateTime FromProperty { get; set; }

        /// <summary>
        /// Gets or sets the end date of recurrence. If not provided, we
        /// default this to 10 years from the start date.
        /// </summary>
        [JsonProperty(PropertyName = "to")]
        public System.DateTime? To { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
